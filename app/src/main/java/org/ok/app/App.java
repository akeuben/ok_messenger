/*
 * This source file was generated by the Gradle 'init' task
 */
package org.ok.app;

import org.ok.app.ui.CoreApp;
import org.ok.app.ui.Login;
import org.ok.communication.PacketManager;
import org.ok.communication.packets.*;
import org.ok.protocols.Block;
import org.ok.protocols.x3dh.X3DH;
import org.ok.protocols.x3dh.X3DHResult;

import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;

public class App {

    public static String username;

    public static void main(String[] args) {
        WindowManager.set(new Login());

        PacketManager<Void, Client> manager = PacketManager.getInstance();
        manager.register(InboundLoginPacket.class);
        manager.register(OutboundLoginResponsePacket.class);
        manager.register(InboundInitialMessagePacket.class);
        manager.register(InboundLoginPacket.class);
        manager.register(InboundMessagePacket.class);
        manager.register(InboundRegisterPacket.class);
        manager.register(InboundRequestPrekeyBundlePacket.class);
        manager.register(InboundUpdatePrekeysPacket.class);
        manager.register(OutboundInitialMessagePacket.class);
        manager.register(OutboundLoginResponsePacket.class);
        manager.register(OutboundMessagePacket.class);
        manager.register(OutboundPrekeyBundlePacket.class);
        manager.register(OutboundRegisterResponsePacket.class);
        manager.register(OutboundRequestPrekeysPacket.class);
        manager.register(InboundUpdateKeysPacket.class);
        manager.register(NoSuchUserPacket.class);

        manager.addHandler(OutboundLoginResponsePacket.class, (p, s, r) -> {
            switch(p.response) {
                case INVALID_PASSWORD -> System.out.println("Invalid Password");
                case INVALID_USER -> System.out.println("Invalid Username");
                case SUCCESS -> {
                    App.username = p.username;
                    ChatManager.init(new InMemoryChatProvider());
                    SecretManager.init(new InMemorySecretProvider(p.username));
                    try {
                        WindowManager.set(new CoreApp());
                    } catch (InvalidAlgorithmParameterException | NoSuchAlgorithmException e) {
                        throw new RuntimeException(e);
                    }

                    System.out.println("Sent the public DH key: " + new Block(SecretManager.getInstance().getDHKeyPair().getPublic().getEncoded()));

                    r.send(new InboundUpdateKeysPacket(X3DH.createPrekeyBundle(
                            SecretManager.getInstance().x3DHKeyPair(),
                            SecretManager.getInstance().signedPrekey()
                    ), SecretManager.getInstance().getDHKeyPair().getPublic()).serialize());
                }
            }
        });

        manager.addHandler(OutboundRegisterResponsePacket.class, (p, s, r) -> {
            if(p.success) {
                System.out.println("Successfully registered!");
            } else {
                System.out.println("Failed to register (does the user already exist?)");
            }
        });

        manager.addHandler(OutboundInitialMessagePacket.class, (p, s, r) -> {
            X3DHResult result = X3DH.runReceive(SecretManager.getInstance().x3DHKeyPair(), SecretManager.getInstance().signedPrekey(), null, p.getMessage());
            Chat chat = new Chat(p.origin, result.getSK(), result.getAD(), SecretManager.getInstance().getDHKeyPair());
            System.out.println("Using the public DH key: " + new Block(SecretManager.getInstance().getDHKeyPair().getPublic().getEncoded()));
            chat.recieveMessage(p.getMessage().getMessage());
            ChatManager.getInstance().addChat(p.origin, chat);
        });

        manager.addHandler(OutboundMessagePacket.class, (p, s, r) -> {
            Chat chat = ChatManager.getInstance().getChat(p.origin);
            if(chat != null) {
                chat.recieveMessage(p.getMessage());
            }
        });

        ClientManager.connect();
    }

    public static void exit() {
        System.exit(0);
    }
}
